#
# Template file is Copyright (c) 2015 Nikolay Zapolnov (zapolnov@gmail.com).
# Licensed under the MIT license.
#

cmake_minimum_required(VERSION 3.2)
project(@{target_name})

include(CheckCXXCompilerFlag)
include(CheckTypeSize)
include(CheckIncludeFile)

if(NOT MSVC AND Z_MINGW_CFLAGS)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${Z_MINGW_CFLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Z_MINGW_CFLAGS}")
endif()

set(ALL_WARNINGS_FLAGS "")
set(NO_WARNINGS_FLAGS "")
if(NOT MSVC)
    check_cxx_compiler_flag("-w" HAVE_DISABLE_ALL_WARNINGS_FLAG)
    if(HAVE_DISABLE_ALL_WARNINGS_FLAG)
        set(NO_WARNINGS_FLAGS "${NO_WARNINGS_FLAGS} -w")
    endif()

    check_cxx_compiler_flag("-Wall" HAVE_ENABLE_ALL_WARNINGS_FLAG)
    if(HAVE_ENABLE_ALL_WARNINGS_FLAG)
        set(ALL_WARNINGS_FLAGS "${ALL_WARNINGS_FLAGS} -Wall")
    endif()

    check_cxx_compiler_flag("-Wextra" HAVE_ENABLE_EXTRA_WARNINGS_FLAG)
    if(HAVE_ENABLE_EXTRA_WARNINGS_FLAG)
        set(ALL_WARNINGS_FLAGS "${ALL_WARNINGS_FLAGS} -Wextra")
    endif()

    check_cxx_compiler_flag("-Wshadow" HAVE_ENABLE_SHADOW_WARNINGS_FLAG)
    if(HAVE_ENABLE_SHADOW_WARNINGS_FLAG)
        set(ALL_WARNINGS_FLAGS "${ALL_WARNINGS_FLAGS} -Wshadow")
    endif()

    check_cxx_compiler_flag("-Wconversion" HAVE_ENABLE_CONVERSION_WARNINGS_FLAG)
    if(HAVE_ENABLE_CONVERSION_WARNINGS_FLAG)
        set(ALL_WARNINGS_FLAGS "${ALL_WARNINGS_FLAGS} -Wconversion")
    endif()
else()
    string(REGEX REPLACE "/W[0-4]" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    string(REGEX REPLACE "/W[0-4]" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")

    check_cxx_compiler_flag("/w" HAVE_DISABLE_ALL_WARNINGS_FLAG)
    if(HAVE_DISABLE_ALL_WARNINGS_FLAG)
        set(NO_WARNINGS_FLAGS "${NO_WARNINGS_FLAGS} /w")
    endif()

    check_cxx_compiler_flag("/W0" HAVE_WARNING_LEVEL_0_FLAG)
    if(HAVE_WARNING_LEVEL_0_FLAG)
        set(NO_WARNINGS_FLAGS "${NO_WARNINGS_FLAGS} /W0")
    endif()

    check_cxx_compiler_flag("/W4" HAVE_WARNING_LEVEL_4_FLAG)
    if(HAVE_WARNING_LEVEL_4_FLAG)
        set(ALL_WARNINGS_FLAGS "${ALL_WARNINGS_FLAGS} /W4")
    endif()
endif()

find_package(Threads)

check_include_file(unistd.h HAVE_UNISTD_H)
if(HAVE_UNISTD_H)
    add_definitions("-DZ_HAVE_UNISTD_H")
endif()

set(CMAKE_REQUIRED_DEFINITIONS "-D_LARGEFILE64_SOURCE=1")
check_type_size(off64_t OFF64_T)
if(HAVE_OFF64_T)
    add_definitions("-D_LARGEFILE64_SOURCE=1")
else()
    set(CMAKE_REQUIRED_DEFINITIONS)
endif()

set(Z_USE_QT5 @{use_qt5})
set(Z_USE_OPENGL @{use_opengl})

if(Z_USE_QT5)
    find_package(Qt5Widgets REQUIRED)
    find_package(Qt5Core REQUIRED)
    find_package(Qt5Gui REQUIRED)
    find_package(Qt5Network REQUIRED)
    find_package(Qt5Multimedia REQUIRED)
    find_package(Qt5OpenGL REQUIRED)
    set(CMAKE_AUTOMOC YES)
endif()

if(Z_USE_OPENGL)
    find_package(OpenGL)
    if(OPENGL_FOUND)
        include_directories(SYSTEM ${OPENGL_INCLUDE_DIR})
    else()
        find_package(PkgConfig)
        if(PKG_CONFIG_FOUND)
            pkg_check_modules(OPENGL REQUIRED gl)
            include_directories(SYSTEM ${OPENGL_INCLUDE_DIRS})
        else()
            message(FATAL_ERROR "Unable to find the OpenGL library.")
        endif()
    endif()
endif()

if(MSVC)
    add_definitions(
        -D_CRT_SECURE_NO_WARNINGS=1
        -D_CRT_SECURE_NO_DEPRECATE=1
        -D_CRT_NONSTDC_NO_DEPRECATE=1
        /wd4510                             # default constructor could not be generated
        /wd4512                             # assignment operator could not be generated
        /wd4610                             # object can never be instantiated - user defined constructor required
    )
endif()

@{defines}
@{include_directories}

include(SourceFiles.cmake)
include(SourceGroups.cmake)

set_source_files_properties(${source_files} PROPERTIES COMPILE_FLAGS "${ALL_WARNINGS_FLAGS}")
set_source_files_properties(${header_files} PROPERTIES HEADER_FILE_ONLY TRUE)
set_source_files_properties(${third_party_source_files} PROPERTIES COMPILE_FLAGS "${NO_WARNINGS_FLAGS}")
set_source_files_properties(${third_party_header_files} PROPERTIES HEADER_FILE_ONLY TRUE)

add_executable(@{target_name} WIN32 MACOSX_BUNDLE
    ${source_files}
    ${header_files}
    ${third_party_source_files}
    ${third_party_header_files}
)

find_library(LIBM m)
if(LIBM)
    target_link_libraries(@{target_name} ${LIBM})
endif()

target_link_libraries(@{target_name} ${CMAKE_THREAD_LIBS_INIT} ${CMAKE_DL_LIBS})
set_target_properties(@{target_name} PROPERTIES CXX_STANDARD 11)

if(Z_USE_QT5)
    target_link_libraries(@{target_name} Qt5::Multimedia Qt5::OpenGL Qt5::Network Qt5::Widgets Qt5::Gui Qt5::Core)
endif()

if(Z_USE_OPENGL)
    target_link_libraries(@{target_name} ${OPENGL_LIBRARIES})
endif()
